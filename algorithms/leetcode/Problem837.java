package leetcode;

/**
 * @author Fcb
 * @date 2020/6/3
 * @description 新21点
 * 爱丽丝参与一个大致基于纸牌游戏 “21点” 规则的游戏，描述如下：
 *
 * 爱丽丝以 0 分开始，并在她的得分少于 K 分时抽取数字。 抽取时，她从 [1, W] 的范围中随机获得一个整数作为分数进行累计，其中 W 是整数。 每次抽取都是独立的，其结果具有相同的概率。
 *
 * 当爱丽丝获得不少于 K 分时，她就停止抽取数字。 爱丽丝的分数不超过 N 的概率是多少？
 *
 * 示例 1：
 *
 * 输入：N = 10, K = 1, W = 10
 * 输出：1.00000
 * 说明：爱丽丝得到一张卡，然后停止。
 * 示例 2：
 *
 * 输入：N = 6, K = 1, W = 10
 * 输出：0.60000
 * 说明：爱丽丝得到一张卡，然后停止。
 * 在 W = 10 的 6 种可能下，她的得分不超过 N = 6 分。
 * 示例 3：
 *
 * 输入：N = 21, K = 17, W = 10
 * 输出：0.73278
 * 提示：
 *
 * 0 <= K <= N <= 10000
 * 1 <= W <= 10000
 * 如果答案与正确答案的误差不超过 10^-5，则该答案将被视为正确答案通过。
 * 此问题的判断限制时间已经减少。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/new-21-game
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class Problem837 {

    /**
     * 解题思路：动态规划
     * 假设dp[x]为当从x点开始抽牌时获胜的概率，那么我们需要求dp[0]
     * 从x点开始抽牌时，可能的点数为x+1,x+2,...,x+W,
     * 那么dp[x] = (dp[x+1]+dp[x+2]+...+dp[x+W])/W
     * 大于K点时不抽牌，那么dp[K],dp[K+1],...,dp[min(K+W-1,N)] = 1
     * dp[N+1],dp[N+2],...,dp[K+W-1] = 0
     * dp[x-1] = (dp[x]+dp[x+1]+...+dp[x+W-1])/W
     * dp[x] = dp[x-1] + (dp[x+W]-dp[x])/W
     */
    public double new21Game(int N, int K, int W) {
        //如果N比K + W都要大，永远不会超过，直接返回1.0
        if (N >= (K + W)) {
            return 1.0;
        }
        double[] dp = new double[K + W];
        for (int i = K; i < N + 1; i++) {
            dp[i] = 1.0;
        }
        for (int i = K; i < dp.length; i++) {
            dp[K - 1] += dp[i];
        }
        dp[K - 1] /= W;

        for (int i = K - 2; i >= 0; i--) {
            dp[i] = dp[i + 1] + dp[i + 1] / W - dp[i + 1 + W] / W;
        }
        return dp[0];
    }
}
